permfuncs <- matrix(NA, length(x), nperm)
nperm <- 1
permfuncs <- matrix(NA, length(x), nperm)
set.seed(1000)
system.time(for (j in 1:nperm) {
cat(j, "\t")
yccl$.obs<-rep(sample(1:66),each=93)
p.naive<-pffr(Y~pasat,ydata=yccl,data=dt,yind=1:93)
pc.naive<-coef(p.naive)
permfuncs[,j] <- pc.naive$smterms$`pasat(yindex)`$value
})
x<-c.naive$smterms$`pasat(yindex)`$x
y<-c.naive$smterms$`pasat(yindex)`$value
plot(x,y)
nperm <- 2
permfuncs <- matrix(NA, length(x), nperm)
set.seed(1000)
system.time(for (j in 1:nperm) {
cat(j, "\t")
yccl$.obs<-rep(sample(1:66),each=93)
p.naive<-pffr(Y~pasat,ydata=yccl,data=dt,yind=1:93)
pc.naive<-coef(p.naive)
permfuncs[,j] <- pc.naive$smterms$`pasat(yindex)`$value
})
nperm <- 200
permfuncs <- matrix(NA, length(x), nperm)
set.seed(1000)
system.time(for (j in 1:nperm) {
cat(j, "\t")
yccl$.obs<-rep(sample(1:66),each=93)
p.naive<-pffr(Y~pasat,ydata=yccl,data=dt,yind=1:93)
pc.naive<-coef(p.naive)
permfuncs[,j] <- pc.naive$smterms$`pasat(yindex)`$value
})
nperm <- 20
permfuncs <- matrix(NA, length(x), nperm)
set.seed(1000)
system.time(for (j in 1:nperm) {
cat(j, "\t")
yccl$.obs<-rep(sample(1:66),each=93)
p.naive<-pffr(Y~pasat,ydata=yccl,data=dt,yind=1:93)
pc.naive<-coef(p.naive)
permfuncs[,j] <- pc.naive$smterms$`pasat(yindex)`$value
})
pvals <- stepdown(y, permfuncs)
stepdown <- function(realvec, permat) {
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
rankmat <- allmat
for (i in 1:ntest) rankmat[i, ] <- pmin(rank(allmat[i,]), rank(-allmat[i,]))
maxk <- max(rankmat[,1])
print(rankmat[,1])
cat("max rank", maxk, '\n')
rb <- apply(as.matrix(rankmat[,-1]),2,min)
pk1 <- pk2.init <- c()
for (k in 1:maxk) {
pk1[k] <- (sum(rb<=k)+1) / B
Sk <- which(rankmat[,1] >= k)
rbs <- apply(as.matrix(rankmat[Sk,-1]),2,min)
pk2.init[k] <- (sum(rbs<=k)+1) / B
}
print(pk2.init)
pk2 <- cummax(pk2.init)
p1 <- p2 <- rep(NA, ntest)
for (k in 1:maxk) {
p1[rankmat[,1]==k] <- pk1[k]
p2[rankmat[,1]==k] <- pk2[k]
}
data.frame(p1=p1, p2=p2)
}
pvals <- stepdown(y, permfuncs)
par(mfrow=2:1)
matplot(1:93, cbind(permfuncs, y), lty=1, col=c(rep(1,nperm),2), type='l')
par(mfrow=2:1)
matplot(x, cbind(permfuncs, y), lty=1, col=c(rep(1,nperm),2), type='l')
par(mfrow=2:1)
matplot(x, cbind(permfuncs, y), lty=1, col=c(rep(1,nperm),2), type='l')
matplot(x, pvals, type='o', pch=16, lty=1, col=3:4)
?coef.pffr
pc.naive<-coef(p.naive,seWithMean =F)
nperm <- 200
permfuncs <- matrix(NA, length(x), nperm)
set.seed(1000)
system.time(for (j in 1:nperm) {
cat(j, "\t")
yccl$.obs<-rep(sample(1:66),each=93)
p.naive<-pffr(Y~pasat,ydata=yccl,data=dt,yind=1:93)
pc.naive<-coef(p.naive,seWithMean =F)
permfuncs[,j] <- pc.naive$smterms$`pasat(yindex)`$value
})
pvals <- stepdown(y, permfuncs)
par(mfrow=2:1)
matplot(x, cbind(permfuncs, y), lty=1, col=c(rep(1,nperm),2), type='l')
par(mfrow=2:1)
matplot(x, cbind(permfuncs, y), lty=1, col=c(rep(1,nperm),2), type='l')
matplot(x, pvals, type='o', pch=16, lty=1, col=3:4)
abline(h=0.05,lty=2)
library(GET)
?GET
global_envelope_test\
global_envelope_test
plot.global_envelope
GET:::plot.global_envelope
GET:::env_basic_plot
user="mengwin"
if(user=="mengwin") filefolder<-"C:/Users/user/Dropbox/HF/philmeng/ICC/R/gordon/"
library(dbicc)
dt1<-read.table(paste0(filefolder,"gordon_visit_1.txt"),
col.names = c(0:333),header = F)[,-1]
dt2<-read.table(paste0(filefolder,"gordon_visit_2.txt"),
col.names = c(0:333),header = F)[,-1]
dt3<-read.table(paste0(filefolder,"gordon_visit_3.txt"),
col.names = c(0:333),header = F)[,-1]
I = 25
d1=d2=d3=list()
for (i in 1:I){
d1[[i]]<-dt1[((i-1)*197+1):(i*197),]
d2[[i]]<-dt2[((i-1)*197+1):(i*197),]
d3[[i]]<-dt3[((i-1)*197+1):(i*197),]
}
dt1v2=dt2v3=dt123<-list()
for (i in 1:I) {
dt1v2[[2*i-1]]=dt123[[3*i-1]]=d1[[i]]
dt2v3[[2*i-1]]=dt1v2[[2*i]]=dt123[[3*i-2]]=d2[[i]]
dt2v3[[2*i]]=dt123[[3*i]]=d3[[i]]
}
mdist<-function(datalist,method=c("f")){
dmat<-matrix(0,length(datalist),length(datalist))
for (i in 2:length(datalist)) for (j in 1:(i-1)){
dmat[i,j]=dmat[j,i]=norm(datalist[[i]]-datalist[[j]],type=method)
}
return(dmat)
}
def<-c(1,4,6,25,26,44,94,114,116,117,126,127,145,146,150,151,152,154,
156,157,162,165,184,186,200,220,225,257,259,278,279,290,315,
316,321,322,323,324,325,326,331)
def=(1:333)[-def]
# def=vent
dt.def123 = lapply(dt123,function(x) x[,def])
cor123<-lapply(dt.def123,cor)
d1.def =lapply(d1,function(x) x[,def])
cord1<-lapply(d1.def,cor)
# pcord1<-lapply(cord1,function(x) {p=cor2pcor(x);dimnames(p)<-dimnames(x);return(p)})
d2.def =lapply(d2,function(x) x[,def])
cord2<-lapply(d2.def,cor)
# pcord2<-lapply(cord2,function(x) {p=cor2pcor(x);dimnames(p)<-dimnames(x);return(p)})
d3.def =lapply(d3,function(x) x[,def])
cord3<-lapply(d3.def,cor)
hml.icc<-function(nroi,cord1,cord2,cord3,cor123,meth="f"){
# if (nroi==41) stop('no. of roi is full, no need for sampling')
nsp=500
set.seed(101)
subsp.c<-replicate(nsp,sort(sample(x=roiname,size=nroi)))
subsp1<-apply(subsp.c,2,function(t) lapply(cord1,function(x) x[t,t]))
subsp2<-apply(subsp.c,2,function(t) lapply(cord2,function(x) x[t,t]))
subsp3<-apply(subsp.c,2,function(t) lapply(cord3,function(x) x[t,t]))
logdet1<-sapply(subsp1,function(x1) unlist(lapply(x1,function(x2)-log(det(x2)))))
logdet2<-sapply(subsp2,function(x1) unlist(lapply(x1,function(x2)-log(det(x2)))))
logdet3<-sapply(subsp3,function(x1) unlist(lapply(x1,function(x2)-log(det(x2)))))
logdet<-rbind(logdet1,logdet2,logdet3)
m.c<-colMeans(logdet)
o.m.c<-cut_number(m.c,3,labels=c("low","med","high")) # or use "cut" or "cut_number"
hroi=subsp.c[,o.m.c=="high"]
hsp<-apply(hroi,2,function(t) lapply(cor123,function(x) x[t,t]))
hdmat<-lapply(hsp,mdist,method=meth)
hicc<-sapply(hdmat,dm2icc,nsub=25,nmea=3)
mroi=subsp.c[,o.m.c=="med"]
msp<-apply(mroi,2,function(t) lapply(cor123,function(x) x[t,t]))
mdmat<-lapply(msp,mdist,method=meth)
micc<-sapply(mdmat,dm2icc,nsub=25,nmea=3)
lroi=subsp.c[,o.m.c=="low"]
lsp<-apply(lroi,2,function(t) lapply(cor123,function(x) x[t,t]))
ldmat<-lapply(lsp,mdist,method=meth)
licc<-sapply(ldmat,dm2icc,nsub=25,nmea=3)
res<-data.frame(list(m=sapply(list(hicc,micc,licc),mean),
se=sapply(list(hicc,micc,licc),function(x) sd(x)/sqrt(length(x)))))
attr(res,"mc")<-m.c
return(res)
}
roiname<-names(d1.def[[1]])
tsroi<-(unique(round(seq(1,floor(length(def)/4-1),,8))))*4
# tsroi<-10
library(ggplot2)
icc.all<-lapply(tsroi,hml.icc,cord1=cord1,cord2=cord2,cord3=cord3,cor123=cor123,meth="f")
def
dm2icc(mdist(cor123),25,3)
aud<-c(10,64,65,66,67,68,69,70,77,102,104,160,171,224,
227,230,232,233,239,244,268,269,329,330)
length(aud)
dt.def12 = lapply(dt1v2,function(x) x[,def])
cor12<-lapply(dt.def12,cor)
dm2icc(mdist(cor12),25,2)
# pcor123<-lapply(cor123,function(x) {p=cor2pcor(x);dimnames(p)<-dimnames(x);return(p)})
dt.def23 = lapply(dt2v3,function(x) x[,def])
cor23<-lapply(dt.def23,cor)
dm2icc(mdist(cor23),25,2)
def<-c(1,4,6,25,26,44,94,114,116,117,126,127,145,146,150,151,152,154,
156,157,162,165,184,186,200,220,225,257,259,278,279,290,315,
316,321,322,323,324,325,326,331)
# def=vent
dt.def123 = lapply(dt123,function(x) x[,def])
cor123<-lapply(dt.def123,cor)
dm2icc(mdist(cor123),25,3)
dt.def12 = lapply(dt1v2,function(x) x[,def])
cor12<-lapply(dt.def12,cor)
dm2icc(mdist(cor12),25,2)
# pcor123<-lapply(cor123,function(x) {p=cor2pcor(x);dimnames(p)<-dimnames(x);return(p)})
dt.def23 = lapply(dt2v3,function(x) x[,def])
cor23<-lapply(dt.def23,cor)
dm2icc(mdist(cor23),25,2)
# def=vent
dt.def123 = lapply(dt123,function(x) x[,def])
cor123<-lapply(dt.def123,cor)
dm2icc(mdist(cor123),25,3)
def
dt.def12 = lapply(dt1v2,function(x) x[,def])
cor12<-lapply(dt.def12,cor)
dm2icc(mdist(cor12),25,2)
# pcor123<-lapply(cor123,function(x) {p=cor2pcor(x);dimnames(p)<-dimnames(x);return(p)})
dt.def23 = lapply(dt2v3,function(x) x[,def])
cor23<-lapply(dt.def23,cor)
dm2icc(mdist(cor23),25,2)
dm2icc(mdist(cor123),25,3)
?cancor
if(.Platform$OS.type == "windows") withAutoprint({
memory.size()
memory.size(TRUE)
memory.limit()
})
v <- rnorm(20,mean=2, sd=2)
M <- matrix(rnorm(20*999),20)
realvec=v
permat=M
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
loranks <- t(apply(allmat, 1, rank, ties.method = "max"))
hiranks <- B + 1 - loranks
rankmat <- pmin(loranks, hiranks)
r1=rankmat
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
rankmat <- allmat
for (i in 1:ntest) rankmat[i, ] <- pmin(rank(allmat[i,]), rank(-allmat[i,]))
rankmat-r1
identical(r1,rankmat)
method="stepdown"
method %in% c("stepdown", "single")
a %in% c("stepdown", "single")
"a" %in% c("stepdown", "single")
pse
method == c("single","stepdown","single.erl")
all(method == c("single","stepdown","single.erl"))
method = c("single","stepdown","single.erl")
all(method == c("single","stepdown","single.erl"))
papet <- function(realvec, permat, method = "stepdown"){
if (method %in% c("stepdown","single")){
res1 <- stepdown(realvec, permat)
if (method == "stepdown") return(res1$p2) else return(res1$p1)
}
if (method == "single.erl") {
res2 <- single.erl(realvec, permat)
return(res2)
}
if (method == "all3"){
res1 <- stepdown(realvec, permat)
res2 <- single.erl(realvec, permat)
res <- rbind(res1$p1,res1$p2,res2)
rownames(res)<-c("sg","sd","sg.erl")
attr(res,"p.raw") = attr(res2,"p.raw")
attr(res,"p.erl") = attr(res2,"p.erl")
return(res)
}
}
stepdown <- function(realvec, permat) {
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
rankmat <- allmat
for (i in 1:ntest) rankmat[i, ] <- pmin(rank(allmat[i,]), rank(-allmat[i,]))
maxk <- max(rankmat[,1])
# print(rankmat[,1])
cat("max rank", maxk, '\n')
rb <- apply(as.matrix(rankmat[,-1]),2,min)
pk1 <- pk2.init <- c()
for (k in 1:maxk) {
pk1[k] <- (sum(rb<=k)+1) / B
Sk <- which(rankmat[,1] >= k)
rbs <- apply(as.matrix(rankmat[Sk,-1]),2,min)
pk2.init[k] <- (sum(rbs<=k)+1) / B
}
print(pk2.init)
pk2 <- cummax(pk2.init)
p1 <- p2 <- rep(NA, ntest)
for (k in 1:maxk) {
p1[rankmat[,1]==k] <- pk1[k]
p2[rankmat[,1]==k] <- pk2[k]
}
data.frame(p1=p1, p2=p2)
}
single.erl <- function(realvec, permat) {
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
loranks <- t(apply(allmat, 1, rank, ties.method = "max"))
hiranks <- B + 1 - loranks
rankmat <- pmin(loranks, hiranks)
sortranks <- apply(rankmat, 2, sort)
lexo_values <- do.call("order", split(sortranks, row(sortranks)))
newrk<-1:B
erlrk<-newrk[order(lexo_values)]
maxk <- B-1
env.erl<-matrix(NA,maxk,ntest)
for (k in 1:maxk) {
rm<- which(erlrk<=k)
upb <- apply(as.matrix(allmat[,-rm]),1,min)
lowb <- apply(as.matrix(allmat[,-rm]),1,max)
env.erl[k,]<-allmat[,1]>=upb&allmat[,1]<=lowb
}
env.erl<-rbind(rep(TRUE,ntest),env.erl)
# res<-(apply(env.erl,2, function(x) which(duplicated(x)==F)[2])-1)/B
res=colSums(env.erl)/B
res[is.na(res)]=1
p.raw=c()
for(i in 1:ntest) p.raw[i]<-sum(rankmat[i,]<=rankmat[i,1])/B
attr(res,"p.erl")=erlrk[1]/B
attr(res, "p.raw")=p.raw
return(res)
}
papet(v,M)
stepdown <- function(realvec, permat) {
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
rankmat <- allmat
for (i in 1:ntest) rankmat[i, ] <- pmin(rank(allmat[i,]), rank(-allmat[i,]))
maxk <- max(rankmat[,1])
# print(rankmat[,1])
# cat("max rank", maxk, '\n')
rb <- apply(as.matrix(rankmat[,-1]),2,min)
pk1 <- pk2.init <- c()
for (k in 1:maxk) {
pk1[k] <- (sum(rb<=k)+1) / B
Sk <- which(rankmat[,1] >= k)
rbs <- apply(as.matrix(rankmat[Sk,-1]),2,min)
pk2.init[k] <- (sum(rbs<=k)+1) / B
}
print(pk2.init)
pk2 <- cummax(pk2.init)
p1 <- p2 <- rep(NA, ntest)
for (k in 1:maxk) {
p1[rankmat[,1]==k] <- pk1[k]
p2[rankmat[,1]==k] <- pk2[k]
}
data.frame(p1=p1, p2=p2)
}
papet(v,M)
stepdown <- function(realvec, permat) {
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
rankmat <- allmat
for (i in 1:ntest) rankmat[i, ] <- pmin(rank(allmat[i,]), rank(-allmat[i,]))
maxk <- max(rankmat[,1])
# print(rankmat[,1])
# cat("max rank", maxk, '\n')
rb <- apply(as.matrix(rankmat[,-1]),2,min)
pk1 <- pk2.init <- c()
for (k in 1:maxk) {
pk1[k] <- (sum(rb<=k)+1) / B
Sk <- which(rankmat[,1] >= k)
rbs <- apply(as.matrix(rankmat[Sk,-1]),2,min)
pk2.init[k] <- (sum(rbs<=k)+1) / B
}
# print(pk2.init)
pk2 <- cummax(pk2.init)
p1 <- p2 <- rep(NA, ntest)
for (k in 1:maxk) {
p1[rankmat[,1]==k] <- pk1[k]
p2[rankmat[,1]==k] <- pk2[k]
}
data.frame(p1=p1, p2=p2)
}
stepdown <- function(realvec, permat) {
allmat <- cbind(realvec, permat)
ntest <- nrow(allmat)
B <- ncol(allmat)
rankmat <- allmat
for (i in 1:ntest) rankmat[i, ] <- pmin(rank(allmat[i,]), rank(-allmat[i,]))
maxk <- max(rankmat[,1])
# print(rankmat[,1])
# cat("max rank", maxk, '\n')
rb <- apply(as.matrix(rankmat[,-1]),2,min)
pk1 <- pk2.init <- c()
for (k in 1:maxk) {
pk1[k] <- (sum(rb<=k)+1) / B
Sk <- which(rankmat[,1] >= k)
rbs <- apply(as.matrix(rankmat[Sk,-1]),2,min)
pk2.init[k] <- (sum(rbs<=k)+1) / B
}
# print(pk2.init)
pk2 <- cummax(pk2.init)
p1 <- p2 <- rep(NA, ntest)
for (k in 1:maxk) {
p1[rankmat[,1]==k] <- pk1[k]
p2[rankmat[,1]==k] <- pk2[k]
}
data.frame(p1=p1, p2=p2)
}
papet(v,M)
stepdown(v,M)
stepdown(v,M,method='all3')
papet <- function(realvec, permat, method = "stepdown"){
if (method %in% c("stepdown","single")){
res1 <- stepdown(realvec, permat)
if (method == "stepdown") return(res1$p2) else return(res1$p1)
}else if (method == "single.erl") {
res2 <- single.erl(realvec, permat)
return(res2)
}else if (method == "all3"){
res1 <- stepdown(realvec, permat)
res2 <- single.erl(realvec, permat)
res <- rbind(res1$p1,res1$p2,res2)
rownames(res)<-c("sg","sd","sg.erl")
attr(res,"p.raw") = attr(res2,"p.raw")
attr(res,"p.erl") = attr(res2,"p.erl")
return(res)
}
}
stepdown(v,M,method='all3')
stepdown(v,M,method='stepdown')
papet(v,M,method='all3')
papet <- function(realvec, permat, method = "stepdown"){
if (method %in% c("stepdown","single")){
res1 <- stepdown(realvec, permat)
if (method == "stepdown") return(res1$p2) else return(res1$p1)
}else if (method == "single.erl") {
res2 <- single.erl(realvec, permat)
return(res2)
}else if (method == "all3"){
res1 <- stepdown(realvec, permat)
res2 <- single.erl(realvec, permat)
res <- rbind(res1$p1,res1$p2,res2)
rownames(res)<-c("sg","stepdown","sg.erl")
attr(res,"p.raw") = attr(res2,"p.raw")
attr(res,"p.erl") = attr(res2,"p.erl")
return(res)
}
}
papet(v,M,method='all3')
library(papet)
?papet
papet:::papet
papet:::stepdown
?papet:::stepdown
library(devtools)
install_github("wtagr/papet",force = TRUE)
library(papet)
?papet
u21<-dbeta(x,1000,1000)*10^(-6)#originally u21<-dbeta(x,1000,1000)*10^(-5)
x<-seq(-.2,1.2,,1400)
u21<-dbeta(x,1000,1000)*10^(-6)#originally u21<-dbeta(x,1000,1000)*10^(-5)
x<-seq(-.2,1.2,,1400)
c1=c2<-matrix(NA,length(x),250)
sig=0.01
for (i in 1:length(x)) {
c1[i,]=rnorm(250,0,sig)
c2[i,]=rnorm(250,0,sig)
}
c1=apply(c1,2,function(y) smooth.spline(x,y,lambda=0.95)$y)
c2=apply(c2,2,function(y) smooth.spline(x,y,lambda=0.95)$y)
c2=apply(c2,2,function(x) x+u21)
matplot(c2)
matplot(c2,type='l')
matplot(c2,type='l')
matplot(c1,type='l')
u21<-dbeta(x,1000,1000)*10^(-6)#originally u21<-dbeta(x,1000,1000)*10^(-5)
u21<-dbeta(x,1000,1000)*10^(-6)#originally u21<-dbeta(x,1000,1000)*10^(-5)
x<-seq(-.2,1.2,,1400)
c1=c2<-matrix(NA,length(x),250)
sig=0.01
for (i in 1:length(x)) {
c1[i,]=rnorm(250,0,sig)
c2[i,]=rnorm(250,0,sig)
}
c1=apply(c1,2,function(y) smooth.spline(x,y,lambda=0.95)$y)
c2=apply(c2,2,function(y) smooth.spline(x,y,lambda=0.95)$y)
c2=apply(c2,2,function(x) x+u21)
matplot(c2,type='l')
max(u21)
max(C21)
max(c2)
u22<-dbeta(x,5,5)*10^(-5)
plot(u22)
plot(u21)
plot(u22)
plot(u21)
max(u2)
max(u21)
max(u22)
max(u23)
u23<-0.00015
u24<-0.0004*(x-0.5)
max(u23)
max(u24)
setwd("C:/Users/user/OneDrive/HF/ICC/git/dbicc")
use_vignette("Application-vector_type")
require(devtools)
use_vignette("Application-vector_type")
use_vignette("Application-matrix_type")
